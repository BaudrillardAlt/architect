#!/usr/bin/env python3

import json
import subprocess
import sys
from pathlib import Path
from urllib.parse import urlparse

LINKS_FILE = Path.home() / "notes/links.json"

def fuzzel_select(items, prompt):
    proc = subprocess.run(
        ["fuzzel", "--dmenu", "--prompt", prompt],
        input="\n".join(items),
        text=True,
        capture_output=True,
    )
    return proc.stdout.strip() if proc.returncode == 0 else None

def read_input(prompt):
    try:
        return input(prompt).strip()
    except (EOFError, KeyboardInterrupt):
        return None

def validate_url(url):
    if not url.startswith(("http://", "https://")):
        url = f"https://{url}"
    parsed = urlparse(url)
    if not parsed.netloc:
        return None
    return url

def main():
    try:
        with open(LINKS_FILE) as f:
            links = json.load(f)
    except FileNotFoundError:
        print(f"{LINKS_FILE} not found", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Invalid JSON: {e}", file=sys.stderr)
        sys.exit(1)

    category = fuzzel_select(links.keys(), "Category:")
    if not category:
        sys.exit(1)

    key = read_input("Key: ")
    if not key:
        sys.exit(1)

    url = read_input("URL: ")
    if not url:
        sys.exit(1)

    url = validate_url(url)
    if not url:
        print("Invalid URL", file=sys.stderr)
        sys.exit(1)

    if category not in links:
        links[category] = {}
    links[category][key] = url

    try:
        tmp = LINKS_FILE.with_suffix(".tmp")
        with open(tmp, "w") as f:
            json.dump(links, f, indent=2)
            f.write("\n")
        tmp.replace(LINKS_FILE)
    except OSError as e:
        print(f"Failed to write: {e}", file=sys.stderr)
        tmp.unlink(missing_ok=True)
        sys.exit(1)

    print(f"Added {category}.{key} â†’ {url}")

if __name__ == "__main__":
    main()
